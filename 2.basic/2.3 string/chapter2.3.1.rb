### シングルクオートとダブルクオート

'これは文字列です。'
"これも文字列です。"

# ダブルクオートで囲むと \n が改行文字として機能します。
puts "こんにちは\nさようなら"

### 結果
# こんにちは
# さようなら


# p だけでは改行されない
p "こんにちは\nさようなら"
#=> "こんにちは\nさようなら"


# シングルクオートでアコムと\nはただの文字列になる
puts 'こんにちは\nさようなら'
#=> こんにちは\nさようなら


# \r キャリッジターン(カーソルを文頭へ戻す)
puts "こんにちは\rさようなら"

# \t タブ文字
puts "こんにちは\tさようなら"


# ダブルクオートだと式展開が使えます。 #{}
name = 'Alice'
puts "Hello, #{name}!!" #=> Hello, Alice!!

i = 10
puts "#{i} は16進数にすると #{i.to_s(16)} です"
# => 10 は16進数にすると a です


# +演算子で文字列を連結することもできます。
# ですが、+演算子やシングルクオート、ダブルクオートがたくさん登場するので式典回を使った方が読み書きしやすいです。
name = 'Alice'
puts 'Hello, ' + name + '!!' #=> Hello, Alice!!

# ダブルクオートを使う文字列で、改行文や式典回の機能を
# 打ち消したい場合は手前にバックスラッシュをつけます。
puts "こんにちは\\nさようなら"

name = 'Alice'
puts "Hello, \#{name}!!" #=> Hello, #{name}!!


# シングルクオートの文字列の中にシングルクオートを服みたい場合も手前に\をつけます。
# ダブルクオートも同様

puts 'He said , "Don\'t speak."'
puts "He said , \"Don't speak.\""
#=> He said , "Don't speak."

