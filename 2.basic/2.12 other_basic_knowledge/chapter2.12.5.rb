### 参照の概念を理解する

# Rubyの変数にはオブジェクトそのものではなく、オブジェクトへの参照が格納されています。

# 変数がどのオブジェクトを参照しているのかは、object_idメソッドを使うとわかります。

# aとbはどちらも同じ文字列だが、オブジェクトとしては別物
a = 'hello'
b = 'hello'

p a.object_id
p b.object_id

# cにbを代入する、b,cはどちらも同じオブジェクト

c = b

p c.object_id

# メソッドの引数にcを渡す。引数として受け取ったcはb、cと同じオブジェクト

def m(d)
  d.object_id
end

p m(c)

# equal? メソッドを使って同じオブジェクトかどうか確認してもいい

p a.equal?(b)
p b.equal?(c)
p b.size.equal?(c.length)

puts "\n"

#同じオブジェクトを参照している場合、オブジェクトの状態が更新されると、その変数がそのまま各変数に影響します。

# b,c は同じオブジェクト、aは異なるオブジェクト
a = 'hello'
b = 'hello'
c = b

p b

# 渡された文字列を破壊的に大文字に変換するメソッドを定義する
def m!(d)
  d.upcase!
end

m!(c)

# b,cはいずれも大文字になる。
p b
p c


# 参照可能なオブジェクト(ミュータブルなオブジェクト)を意識しないと、
# 思いがけないバグを産むことがあります。