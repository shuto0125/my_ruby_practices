### && や || の戻り値と評価を終了するタイミング

# &&や||を使った場合、式全体の戻り値が必ずしもtrueまたはfalseになるとは限りません。

p 1 && 2 && 3 #=> 3
p 1 && nil && 3 #=> nil
p 1 && false && 3 #=> false

p nil || false #=> false
p false || nil #=> nil
p nil || false || 2 || 3 #=> 2


# Rubyは式全体が真または偽であることが決定するまで左辺から順に式を評価します。
# 式全体の真偽が決定すると、式の評価が終了し、最後に評価した式の値を返します。

# 1 && 2 && 3 は全ての式を評価する必要があったため、最後の式である3が戻り値になっています。
# 一方、1 && nil && 3 は2つ目のnilを評価した時点で式全体の真偽値が偽であることが決定したため、
# そこで評価を終了し、nilを返します。

# || の考え方も同じです。
# nil || false || 2 || 3 の戻り値が2になるのは、
# 2を評価した時点で式全体の真偽値が真であることが確定したためです。

# Rubyでは、if文意外のところで&&や||を意図的に使う場合があります。

# user = find_user('Alice') || find_user('Bob') || find_user('Carol')

# # 正常なユーザーであればメールを送信する(左辺が)偽であればメールは実行されない
# user.valid? && send_email_to(user)